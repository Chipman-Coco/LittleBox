import com.chipman.buildsrc.*

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-parcelize'
}

android {
    namespace "com.chipman.littlebox.funny"
    compileSdk ProjectBuildConfig.compileSdkVersion

    defaultConfig {
        applicationId "com.chipman.littlebox.funny"
        minSdk ProjectBuildConfig.minSdkVersion
        targetSdk ProjectBuildConfig.targetSdkVersion
        versionCode ProjectBuildConfig.versionCode
        versionName ProjectBuildConfig.versionName
        testInstrumentationRunner DependencyConfig.Android.AndroidJUnitRunner

        ndk {
            /**
             * 设置支持的SO库架构（'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'）
             */
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // 配置String常量，可以用BuildConfig类引用
            buildConfigField "String", "TOKEN", "\"${PROJECT_TOKEN}\""
            buildConfigField "String", "PHONE", "\"${PHONE}\""
            buildConfigField "String", "APP_ID", "\"${APP_ID}\""
            buildConfigField "String", "APP_SECRET", "\"${APP_SECRET}\""
            // 配置string资源，使用@string可以在manifest等文件中引用
            // resValue "string", "wxAppId", "${WX_APP_ID}"
        }
    }

    // 自定义打包apk的文件名
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName != null && outputFileName.endsWith('.apk')) {
                outputFileName = "LittleBox-Funny" +
                        "-${variant.buildType.name}" +
                        "-${ProjectBuildConfig.versionName}" +
                        ".apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation(project(":multitype"))

    implementation(DependencyConfig.Android.AppCompat)
    implementation(DependencyConfig.Android.ConstraintLayout)
    implementation(DependencyConfig.Android.ActivityKtx)
    implementation(DependencyConfig.Android.FragmentKtx)
    implementation(DependencyConfig.Android.Material)
    implementation(DependencyConfig.Android.CoreKtx)
    implementation(DependencyConfig.Android.SwiperRefresh)

    implementation(DependencyConfig.Kotlin.Kotlin)
    implementation(DependencyConfig.Kotlin.CoroutinesCore)
    implementation(DependencyConfig.Kotlin.CoroutinesAndroid)
    implementation(DependencyConfig.Kotlin.SerialJson)

    implementation(DependencyConfig.Jetpack.ViewModel)
    implementation(DependencyConfig.Jetpack.ViewModelSavedState)
    implementation(DependencyConfig.Jetpack.LiveData)
    implementation(DependencyConfig.Jetpack.Lifecycle)
    implementation(DependencyConfig.Jetpack.Hilt)
    kapt(DependencyConfig.Jetpack.HiltAPT)
    implementation(DependencyConfig.Jetpack.Paging3)

    implementation(DependencyConfig.Prevalent.Okhttp)
    implementation(DependencyConfig.Prevalent.OkHttpInterceptorLogging)
    implementation(DependencyConfig.Prevalent.Retrofit)
    implementation(DependencyConfig.Prevalent.RetrofitConverterGson)
    implementation(DependencyConfig.Prevalent.MMKV)
    implementation(DependencyConfig.Prevalent.Glide)
    kapt(DependencyConfig.Prevalent.GlideAPT)
    implementation(DependencyConfig.Prevalent.FlexBox)
    implementation(DependencyConfig.Prevalent.Lottie)

    implementation(DependencyConfig.Github.Timber)
    implementation(DependencyConfig.Github.Util)
    implementation(DependencyConfig.Github.ToastUtil)
    implementation(DependencyConfig.Github.DialogCore)
    implementation(DependencyConfig.Github.DialogLifecycle)
    implementation(DependencyConfig.Github.DialogBottomSheets)

    testImplementation(DependencyConfig.Android.TestExtJunit)
    androidTestImplementation(DependencyConfig.Android.Junit)
    androidTestImplementation(DependencyConfig.Android.TestEspressoCore)
}